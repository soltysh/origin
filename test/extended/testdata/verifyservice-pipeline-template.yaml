apiVersion: v1
kind: Template
labels:
  template: nodejs-example
metadata:
  name: nodejs-example
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: nodejs-example
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: nodejs-example
- apiVersion: v1
  kind: Service
  metadata:
    name: nodejs-example-headless
  spec:
    clusterIP: None
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      name: nodejs-example
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: nodejs-example
  spec:
    replicas: 2
    selector:
      name: nodejs-example
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: nodejs-example
        name: nodejs-example
      spec:
        containers:
        - env: []
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: nodejs-example
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-example
        from:
          kind: ImageStreamTag
          name: nodejs:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: jenkins-verifyservice-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
              timeout(time: 20, unit: 'MINUTES') {
                  // Select the default cluster
                  openshift.withCluster() {
                      // Select the default project
                      openshift.withProject() {
                        // Verify Normal Services
                        def connectedNormalService = openshift.verifyService('nodejs-example')
                        // Verify Headless Services with Selectors
                        def connectedHeadlessService = openshift.verifyService('nodejs-example-headless')
                      }
                  }
              }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
