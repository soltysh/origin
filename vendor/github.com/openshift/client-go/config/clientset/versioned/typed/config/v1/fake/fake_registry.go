// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	config_v1 "github.com/openshift/api/config/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRegistries implements RegistryInterface
type FakeRegistries struct {
	Fake *FakeConfigV1
}

var registriesResource = schema.GroupVersionResource{Group: "config.openshift.io", Version: "v1", Resource: "registries"}

var registriesKind = schema.GroupVersionKind{Group: "config.openshift.io", Version: "v1", Kind: "Registry"}

// Get takes name of the registry, and returns the corresponding registry object, and an error if there is any.
func (c *FakeRegistries) Get(name string, options v1.GetOptions) (result *config_v1.Registry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(registriesResource, name), &config_v1.Registry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*config_v1.Registry), err
}

// List takes label and field selectors, and returns the list of Registries that match those selectors.
func (c *FakeRegistries) List(opts v1.ListOptions) (result *config_v1.RegistryList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(registriesResource, registriesKind, opts), &config_v1.RegistryList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &config_v1.RegistryList{ListMeta: obj.(*config_v1.RegistryList).ListMeta}
	for _, item := range obj.(*config_v1.RegistryList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested registries.
func (c *FakeRegistries) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(registriesResource, opts))
}

// Create takes the representation of a registry and creates it.  Returns the server's representation of the registry, and an error, if there is any.
func (c *FakeRegistries) Create(registry *config_v1.Registry) (result *config_v1.Registry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(registriesResource, registry), &config_v1.Registry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*config_v1.Registry), err
}

// Update takes the representation of a registry and updates it. Returns the server's representation of the registry, and an error, if there is any.
func (c *FakeRegistries) Update(registry *config_v1.Registry) (result *config_v1.Registry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(registriesResource, registry), &config_v1.Registry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*config_v1.Registry), err
}

// Delete takes name of the registry and deletes it. Returns an error if one occurs.
func (c *FakeRegistries) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(registriesResource, name), &config_v1.Registry{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRegistries) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(registriesResource, listOptions)

	_, err := c.Fake.Invokes(action, &config_v1.RegistryList{})
	return err
}

// Patch applies the patch and returns the patched registry.
func (c *FakeRegistries) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *config_v1.Registry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(registriesResource, name, data, subresources...), &config_v1.Registry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*config_v1.Registry), err
}
