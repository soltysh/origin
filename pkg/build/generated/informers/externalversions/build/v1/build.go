// This file was automatically generated by informer-gen

package v1

import (
	build_v1 "github.com/openshift/origin/pkg/build/apis/build/v1"
	clientset "github.com/openshift/origin/pkg/build/generated/clientset"
	internalinterfaces "github.com/openshift/origin/pkg/build/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/origin/pkg/build/generated/listers/build/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// BuildInformer provides access to a shared informer and lister for
// Builds.
type BuildInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.BuildLister
}

type buildInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewBuildInformer constructs a new informer for Build type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBuildInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.BuildV1().Builds(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.BuildV1().Builds(namespace).Watch(options)
			},
		},
		&build_v1.Build{},
		resyncPeriod,
		indexers,
	)
}

func defaultBuildInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewBuildInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *buildInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&build_v1.Build{}, defaultBuildInformer)
}

func (f *buildInformer) Lister() v1.BuildLister {
	return v1.NewBuildLister(f.Informer().GetIndexer())
}
