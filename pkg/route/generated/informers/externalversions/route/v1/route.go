// This file was automatically generated by informer-gen

package v1

import (
	route_v1 "github.com/openshift/origin/pkg/route/apis/route/v1"
	clientset "github.com/openshift/origin/pkg/route/generated/clientset"
	internalinterfaces "github.com/openshift/origin/pkg/route/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/origin/pkg/route/generated/listers/route/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// RouteInformer provides access to a shared informer and lister for
// Routes.
type RouteInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.RouteLister
}

type routeInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewRouteInformer constructs a new informer for Route type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRouteInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.RouteV1().Routes(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.RouteV1().Routes(namespace).Watch(options)
			},
		},
		&route_v1.Route{},
		resyncPeriod,
		indexers,
	)
}

func defaultRouteInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewRouteInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *routeInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&route_v1.Route{}, defaultRouteInformer)
}

func (f *routeInformer) Lister() v1.RouteLister {
	return v1.NewRouteLister(f.Informer().GetIndexer())
}
